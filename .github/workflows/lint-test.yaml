name: Lint & Test

on:
  workflow_call

jobs:
  lint-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python Dependencies
        uses: HassanAbouelela/actions/setup-python@setup-python_v1.6.0
        with:
          python_version: '3.11'

      # Start the database early to give it a chance to get ready before
      # we start running tests.
      - name: Run database using docker compose
        run: docker compose run -d -p 7777:5432 --name pydis_web postgres

      # We will not run `flake8` here, as we will use a separate flake8
      # action.
      - name: Run pre-commit hooks
        run: SKIP=ruff pre-commit run --all-files

      # Run `ruff` using github formatting to enable automatic inline annotations.
      - name: Run ruff
        run: "ruff check --output-format=github ."

      - name: Migrations and run tests with coverage.py
        run: |
          python manage.py makemigrations --check
          coverage run manage.py test --no-input
          coverage report -m
          coverage lcov
        env:
          CI: True
          DATABASE_URL: postgres://pysite:pysite@localhost:7777/pysite
          METRICITY_DB_URL: postgres://pysite:pysite@localhost:7777/metricity
          PYTHONWARNINGS: error

      # This step will publish the coverage reports coveralls.io and
      # link the report to the commit
      - name: Publish Coverage Report
        uses: coverallsapp/github-action@v2.3.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ./coverage.lcov

      - name: Tear down docker compose containers
        run: docker compose stop
        if: ${{ always() }}

      # Prepare the Pull Request Payload artifact. If this fails, we
      # we fail silently using the `continue-on-error` option. It's
      # nice if this succeeds, but if it fails for any reason, it
      # does not mean that our lint-test checks failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: pull-request-payload
          path: pull_request_payload.json
