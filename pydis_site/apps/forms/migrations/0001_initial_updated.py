# Generated by Django 5.1.7 on 2025-03-27 18:02

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Admin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
        ),
        migrations.CreateModel(
            name="DiscordRole",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="The role name, taken from Discord.", max_length=100)),
                (
                    "colour",
                    models.IntegerField(
                        help_text="The integer value of the colour of this role from Discord.",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=0, message="Colour hex cannot be negative."
                            )
                        ],
                    ),
                ),
                ("hoist", models.BooleanField(help_text="Whether this role is hoisted.")),
                ("icon", models.CharField(help_text="Icon hash of the role.", max_length=250, null=True)),
                ("unicode_emoji", models.CharField(help_text="Unicode emoji of the role.", max_length=250, null=True)),
                (
                    "position",
                    models.IntegerField(
                        help_text="The position of the role in the role hierarchy of the Discord Guild."
                    ),
                ),
                (
                    "permissions",
                    models.BigIntegerField(
                        help_text="The integer value of the permission bitset of this role from Discord.",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=0, message="Role permissions cannot be negative."
                            )
                        ],
                    ),
                ),
                ("managed", models.BooleanField(help_text="Whether this role is managed by an integration.")),
                ("mentionable", models.BooleanField(help_text="Whether this role is mentionable.")),
                ("role_tags", models.JSONField(help_text="Further metadata about this role.", null=True)),
                (
                    "last_update",
                    models.DateTimeField(
                        auto_now=True, help_text="When this role was most recently refreshed from Discord."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DiscordUser",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        help_text="The ID of this user.",
                        primary_key=True,
                        serialize=False,
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=0, message="User IDs can not be negative."
                            )
                        ],
                        verbose_name="ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(help_text="The name of this user.", max_length=32, verbose_name="Username"),
                ),
                (
                    "discriminator",
                    models.PositiveSmallIntegerField(
                        help_text="The discriminator of this user, taken from Discord.",
                        validators=[
                            django.core.validators.MaxValueValidator(
                                limit_value=9999, message="Discriminators may not exceed `9999`."
                            )
                        ],
                    ),
                ),
                (
                    "avatar",
                    models.CharField(
                        help_text="The avatar hash of this user.", max_length=100, null=True, verbose_name="Avatar hash"
                    ),
                ),
                ("bot", models.BooleanField(help_text="Whether this user is a bot.", null=True, verbose_name="Is bot")),
                (
                    "system",
                    models.BooleanField(
                        help_text="Whether this user is a system user.", null=True, verbose_name="Is system user"
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        help_text="The identifier of the locale that this user is using.",
                        null=True,
                        verbose_name="Locale identifier",
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        help_text="Whether this user's email address is verified.",
                        null=True,
                        verbose_name="Verified email address",
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        help_text="The e-mail address of this user.", null=True, verbose_name="E-mail address"
                    ),
                ),
                (
                    "flags",
                    models.IntegerField(help_text="User account flags as a bitfield.", null=True, verbose_name="Flags"),
                ),
                (
                    "premium_type",
                    models.IntegerField(
                        help_text="The type of nitro subscription on a user's account.",
                        null=True,
                        verbose_name="Nitro type",
                    ),
                ),
                (
                    "public_flags",
                    models.IntegerField(
                        help_text="The public flags on a user's account.", null=True, verbose_name="Flags"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DiscordMember",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "nick",
                    models.CharField(help_text="The nickname that the member is using.", max_length=100, null=True),
                ),
                (
                    "avatar",
                    models.CharField(
                        help_text="The avatar hash of this member for this server.",
                        max_length=100,
                        null=True,
                        verbose_name="Avatar hash",
                    ),
                ),
                (
                    "roles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.BigIntegerField(
                            help_text="The snowflake ID of a role this member is part of.",
                            validators=[
                                django.core.validators.MinValueValidator(
                                    limit_value=0, message="Role IDs cannot be negative."
                                )
                            ],
                        ),
                        help_text="Roles this member is part of.",
                        size=None,
                        verbose_name="Roles",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(help_text="When this member has joined the guild.", verbose_name="Join date"),
                ),
                (
                    "premium_since",
                    models.DateTimeField(
                        help_text="When this member started boosting the guild.",
                        null=True,
                        verbose_name="Boosting since",
                    ),
                ),
                ("deaf", models.BooleanField(help_text="Whether this user is deaf.", verbose_name="Deaf")),
                ("mute", models.BooleanField(help_text="Whether this user is mute.", verbose_name="Mute")),
                (
                    "pending",
                    models.BooleanField(
                        help_text="Whether this user has not yet passed membership screening.",
                        null=True,
                        verbose_name="Pending screening",
                    ),
                ),
                (
                    "permissions",
                    models.BigIntegerField(
                        help_text="Total permissions of the member in the channel.",
                        null=True,
                        verbose_name="Pending screening",
                    ),
                ),
                (
                    "communication_disabled_until",
                    models.DateTimeField(
                        help_text="Until when the user is server-muted.", null=True, verbose_name="Timeout until"
                    ),
                ),
                (
                    "last_update",
                    models.DateTimeField(
                        auto_now=True, help_text="When this member was most recently refreshed from Discord."
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="The user associated with this member.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.discorduser",
                    ),
                ),
            ],
        ),
    ]
